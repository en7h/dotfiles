#!/usr/bin/env bash

# MIT License
#
# Copyright (c) 2020 Manish Sahani
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Brew Binaries - these are binaries that are available as brew formula. A list
# of these formulas are stored in the bins.txt file under ~/.config/kalkayan
# ~ Note ~ : this file is automatically updates with everytime brew installs or
# removes a binary
mapfile -t bins <  <(cat $HOME/.config/kalkayan/bins.txt)

# Brew Casks - these are the casks that are available as brew formula. A list
# of these casks are stored in the casks.txt under ~/.config/kalkayan folder.
# ~ Note ~ : this file is automatically updates with everytime brew installs or
# removes a casks
mapfile -t casks < <(cat $HOME/.config/kalkayan/casks.txt)


# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                          /!\ Install dotfiles /!\                           #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                                                                             #
#  Elegant way to manage and share dotfiles across machines using a single    #
#  git repository (see more ~ https://bit.ly/kalkayan-df)                     #
#                                                                             #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #

# The trick behind the mangement of dotfiles is cloning it as a bare repository
# therefore, first, we need to define some arguments for the git command. The
# location for the dotfiles is under $HOME directory.
DOTFILES="/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME"

# Brachs gives us the functionality to create profiles of dotfiles for machines
# main is for macos, linux is for ubuntu etc.
DF_BRANCH="main"

# Bring the dotfiles from hosted repository if not already present
if [ ! -d "$HOME/.dotfiles" ]; then
    /usr/bin/git clone --bare https://github.com/kalkayan/dotfiles.git $HOME/.dotfiles
fi

# Reset the unstagged changes before updating (TODO: experiment with stash)
if [[ " $@ " =~ " --dotfiles-reset " ]]; then
    $DOTFILES reset --hard
fi

# Activate the profile for the current dev machine and Update the dotfiles with
# remote repository
$DOTFILES checkout $DF_BRANCH
$DOTFILES pull origin $DF_BRANCH


# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                         /!\ Command Line tools  /!\                         #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                                                                             #
#  Install macOS SDK, headers, build tools such as the compilers - LLVM,      #
#  interpreters, and system package manager - Brew.sh.                        #
#                                                                             #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #

# Install Xcode-select (xcode command line tools) if  not already installed
if ! xcode-select -p 1>/dev/null; then
    xcode-select --install
fi

# Install brew.sh (system package manager) if already not installed
if ! brew -h 1>/dev/null; then
    echo /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

# Update brew to latest available version
brew update


# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                           /!\ Binaries and Casks /!\                        #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                                                                             #
#  This section deals with the installation of all the binaries and casks.    #
#                                                                             #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #

# required to properly install coreutils
export PATH="$(brew --prefix coreutils)/libexec/gnubin:/usr/local/bin:$PATH"

# Install binaries using Homebrew, iterate over bins array and install.
for binary in "${bins[@]}"; do
    # split the brew formula into binary name and version of installation and
    # get the name of the binary (ex- php in php@7.4)
    b=`echo $binary | cut -d \@ -f 1`
    # check if the binary is already present, otherwise install
    if ! brew list --formula | grep "$b" 1>/dev/null; then
        brew install "$binary"
    fi
done

# Install casks using Homebrew, iterate over casks array and install.
for c in "${casks[@]}"; do
    # first, check if the cask is present or not, if not install
    if ! brew list --cask | grep "$c" 1>/dev/null; then
        brew casks install "$c"
    fi
done

# Chanage the default shell to zsh installed by Homebrew (macos may ship with
# older version, therefore update the zsh)
BREW_PREFIX=$(brew --prefix)

if ! fgrep -q "${BREW_PREFIX}/bin/zsh" /etc/shells; then
  echo "${BREW_PREFIX}/bin/zsh" | sudo tee -a /etc/shells;
  chsh -s "${BREW_PREFIX}/bin/zsh";
fi


# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                           /!\ Post Installation /!\                         #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                                                                             #
#  This section deals with the setup of specific binaries after installation  #
#                                                                             #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #

# Post-Installation for Node Version Manager (NVM)
if [[ " ${bins[@]} " =~ " nvm " ]]; then
    [ ! -d ~/.nvm ] && mkdir ~/.nvm
    # source the nvm.sh file to add nvm in path
    [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"
    # Install lts support for nodejs, yarn and update npm
    nvm install --lts
    npm install -g npm yarn
fi

brew cleanup

[ -f ~/.zshrc ] && source ~/.zshrc
