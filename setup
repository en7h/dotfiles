#!/usr/bin/env bash

# Logging fuction helpers for the script, they take string as their first
# argument and set and reset the colors of the terminal.
function P_ () { echo -e "\033[36m$1\033[0m" }
function S_ () { echo -e "\033[33m$1\033[0m" }
function T_ () { echo -e "\033[92m$1\033[0m" }

# Ask for sudo beforehand, so that the script doesn't halt installation in the
# later sections.
sudo -v

# Keep sudo session persistent, taken from -- https://gist.github.com/cowboy/3118588
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

[ ! -d $HOME/bin ] && mkdir $HOME/bin

# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                         /!\ Command Line tools  /!\                         #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                                                                             #
#  Install macOS SDK, headers, build tools such as the compilers - LLVM,      #
#  interpreters, and system package manager - Brew.sh.                        #
#                                                                             #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #


# Install Xcode-select (xcode command line tools) if  not already installed
P_ "Verifying xcode command line tools installation"
if ! xcode-select -p 2>/dev/null; then
	# Install the xcode command line tools - xcode-select is the eaisest way.
    P_ "Installing XCode Command Line tools using default xcode-select"
    xcode-select --install

    # Wait for system to install the command line tools (this is to halt the
    # script until tools aren't installed).
    P_ "The Installation is currently in progress, Click Agree on the prompt."
    while ! xcode-select -p 2>/dev/null; do ; sleep 5 ; done

    # Verify the installation (the loop will only break when the path for the
    # tools will be found, therefore, no extra verfication needed)
    T_ "XCode Command line tools successfully installed."
fi

# Install brew.sh (system package manager) if already not installed
P_ "Verifying homebrew installation and updating to the latest version"
if ! brew -v 2>/dev/null; then
	# Install homebrew using the method specified at https://brew.sh/
	P_ "Installing Homebrew -- system package manager for macOS."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

# Update brew to latest available version
brew update

# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                          /!\ Install dotfiles /!\                           #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                                                                             #
#  Elegant way to manage and share dotfiles across machines using a single    #
#  git repository (see more ~ https://bit.ly/kalkayan-df)                     #
#                                                                             #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #


# The trick behind the mangement of dotfiles is cloning it as a bare repository
# therefore, first, we need to define some arguments for the git command. The
# location for the dotfiles is under $HOME directory.
alias dotfiles="/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME"

# Brachs gives us the functionality to create profiles of dotfiles for machines
# main is for macos, linux is for ubuntu etc.
DF_BRANCH="main"

# Bring the dotfiles from hosted repository if not already present
if [ ! -d "$HOME/.dotfiles" ]; then
    /usr/bin/git clone --bare https://github.com/en7h/dotfiles.git $HOME/.dotfiles
fi


# Reset the unstagged changes before updating (TODO: experiment with stash)
if [[ " $@ " =~ " --dotfiles-reset " ]]; then
    dotfiles reset --hard
fi

# Activate the profile for the current dev machine and Update the dotfiles with
# remote repository
dotfiles config status.showUntrackedFiles no
dotfiles checkout $DF_BRANCH
dotfiles pull origin $DF_BRANCH

# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                           /!\ Binaries and Casks /!\                        #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                                                                             #
#  This section deals with the installation of all the binaries and casks.    #
#                                                                             #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #


# Brew Binaries - these are binaries that are available as brew formula. A list
# of these formulas are stored in the bins.txt file under ~/.config/en7h
# ~ Note ~ : this file is automatically updates with everytime brew installs or
# removes a binary
bins=( $(cut -d '=' -f1 $HOME/.config/en7h/bins.txt) )

# Brew Casks - these are the casks that are available as brew formula. A list
# of these casks are stored in the casks.txt under ~/.config/en7h folder.
# ~ Note ~ : this file is automatically updates with everytime brew installs or
# removes a casks
casks=( $(cut -d '=' -f1 $HOME/.config/en7h/casks.txt) )

# required to properly install coreutils
export PATH="$(brew --prefix coreutils)/libexec/gnubin:/usr/local/bin:$PATH"

# Install binaries using Homebrew, iterate over bins array and install.
P_ "Installing the following binaries $bins"
for binary in "${bins[@]}"; do
    # split the brew formula into binary name and version of installation and
    # get the name of the binary (ex- php in php@7.4)
    b=`echo $binary | cut -d \@ -f 1`
    # check if the binary is already present, otherwise install
    if ! brew list --formula | grep "$b" 1>/dev/null; then
        brew install "$binary"
    fi
done

# Install casks using Homebrew, iterate over casks array and install.
for c in "${casks[@]}"; do
    # first, check if the cask is present or not, if not install
    if ! brew list --cask | grep "$c" 1>/dev/null; then
        brew install --cask "$c"
    fi

done

# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                           /!\ Post Installation /!\                         #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                                                                             #
#  This section deals with the setup of specific binaries after installation  #
#                                                                             #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #

# Post-Installation for Node Version Manager (NVM)
if [[ " ${bins[@]} " =~ " nvm " ]]; then
    [ ! -d ~/.nvm ] && mkdir ~/.nvm
    # source the nvm.sh file to add nvm in path
    [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"
    # Install lts support for nodejs, yarn and update npm
    nvm install --lts
    npm install -g npm yarn
fi

if [[ "${bins[@]} " =~ " fzf " ]]; then
    $(brew --prefix)/opt/fzf/install --all
fi

if [[ "${bins[@]} " =~ " neovim " ]]; then
	sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    vi +PlugInstall +qall
fi

[ -f ~/.zshrc ] && source ~/.zshrc
